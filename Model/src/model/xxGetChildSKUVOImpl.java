package model;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;

import java.sql.SQLException;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 12 01:34:54 EDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class xxGetChildSKUVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public xxGetChildSKUVOImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        System.out.println("parames size"+params.length);
        storeNewResultSet(qc, retrieveParamsResultSet(qc, params));
        
        super.executeQueryForCollection(qc, params, noUserParams);
    }
    private ResultSet retrieveParamsResultSet(Object qc, Object[] params) {
    ResultSet rs =getStoredProcParams(params);
    return rs;
    }
    
    public ResultSet getStoredProcParams(Object[] params) {
    Connection conn = null;
    ResultSet rs = null;
    try {

    String sp = "begin ? := xx_getchildskus(?); end;";
    CallableStatement proc = null;
    proc = this.getDBTransaction().createCallableStatement(sp,0);    
    proc.registerOutParameter(1, OracleTypes.CURSOR);
    System.out.println("Parameter value"+params[0]);
    proc.setObject(2, params[0]);
    proc.executeUpdate();
    proc.executeQuery();
    rs= ((OracleCallableStatement)proc).getCursor(1);

    } catch (SQLException sqlerr) {
    throw new JboException(sqlerr);
    }

    return rs;
    }
    private void storeNewResultSet(Object qc, ResultSet rs) {
    ResultSet existingRs = (ResultSet)getUserDataForCollection(qc);
    // If this query collection is getting reused, close out any previous rowset
    if (existingRs != null) {
    try {
    existingRs.close();
    } catch (SQLException e) {
    throw new JboException(e);
    }
    }
    setUserDataForCollection(qc, rs);
    hasNextForCollection(qc); // Prime the pump with the first row.
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        ResultSet rs = (ResultSet)getUserDataForCollection(qc);
        boolean nextOne = false;
        if (rs != null) {
        try {
        nextOne = rs.next();
        /*
        * When were at the end of the result set, mark the query collection
        * as "FetchComplete".
        */
        if (!nextOne) {
        setFetchCompleteForCollection(qc, true);
        /*
        * Close the result set, we're done with it
        */
        rs.close();
        }
        } catch (SQLException s) {
        throw new JboException(s);
        }
        }
        return nextOne;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        resultSet = (ResultSet)getUserDataForCollection(qc);
        /*
        * Create a new row to populate
        */
        ViewRowImpl r = createNewRowForCollection(qc);

        if (resultSet != null) {
        try {
        /*
        * Populate new row by attribute slot number for current row in Result Set
        */
        populateAttributeForRow(r, 0,
        resultSet.getString(1));
        populateAttributeForRow(r, 1,
        resultSet.getString(2));
        } catch (SQLException s) {
        throw new JboException(s);
        }
        }

        return r;
    }
    protected void releaseUserDataForCollection(Object qc, Object rs) {
    ResultSet userDataRS = (ResultSet)getUserDataForCollection(qc);
    if (userDataRS != null) {
    try {
    userDataRS.close();
    } catch (SQLException s) {
    /* Ignore */
    }
    }
    super.releaseUserDataForCollection(qc, rs);
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        /* Object[] params = viewRowSet.getParameters(true);
        BigDecimal id = (BigDecimal)params[0];
        CallableStatement st = null;
        try {
        st = getDBTransaction().createCallableStatement(COUNTSQL,
        DBTransaction.DEFAULT);

        st.registerOutParameter(1,Types.NUMERIC);

        if (id == null) st.setNull(2,Types.NUMERIC);
        else st.setBigDecimal(2,id);
        st.execute();
        return st.getLong(1);
        }
        catch (SQLException s) {
        throw new JboException(s);
        }
        finally {try {st.close();} catch (SQLException s) {}} */

        // long value = super.getQueryHitCount(viewRowSet);
        //return value;
        return 108;
        }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
   
}


